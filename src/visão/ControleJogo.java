package visão;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

import entidade.Barco;
import exception.CoordenadaInvalidaException;
import exception.DirecaoInvalidaException;

public class ControleJogo {
	int contaP=2, contaM=3, contaG=4, contaE=5;
	
	String quadrado[][] = {{" ", " ", "A", " ","B", " ","C", " ","D", " ","E", " ","F", " ","G", " ","H", " ","I", " ","J", " "," ", " "," ", " ", "A", " ","B", " ","C", " ","D", " ","E", " ","F", " ","G", " ","H", " ","I", " ","J", " "}, {" ","╔", "═", "╦", "═", "╦", "═", "╦", "═", "╦", "═", "╦", "═", "╦", "═", "╦", "═", "╦", "═", "╦", "═", "╗", " ", " "," ","╔", "═", "╦", "═", "╦", "═", "╦", "═", "╦", "═", "╦", "═", "╦", "═", "╦", "═", "╦", "═", "╦", "═", "╗"}, {"0", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║", " ", " ", "0", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"},{" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣", " "," ", " ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"1", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║", " ", " ", "1", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"},{" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣", " ", " ", " ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"2", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║", " ", " ", "2", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"},{" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣", " ", " ", " ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"3", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║", " ", " ", "3", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"},{" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣", " ", " ", " ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"4", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║", " ", " ", "4", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"},{" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣", " ", " ", " ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"5","║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║", " ", " ", "5","║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"},{" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣", " ", " ", " ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"6", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║", " ", " ", "6", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"},{" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣", " ", " ", " ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"7", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║", " ", " ", "7", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"},{" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣", " ", " ", " ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"8", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║", " ", " ", "8", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"}, {" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣", " ", " ", " ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"9", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║", " ", " ", "9", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"}, {" ", "╚", "═", "╩", "═", "╩", "═", "╩", "═", "╩", "═", "╩", "═", "╩", "═", "╩", "═", "╩", "═", "╩", "═", "╝", " ", " ", " ", "╚", "═", "╩", "═", "╩", "═", "╩", "═", "╩", "═", "╩", "═", "╩", "═", "╩", "═", "╩", "═", "╩", "═", "╝\n"}};
	String quadrado2[][] = {{" ", " ", "A", " ","B", " ","C", " ","D", " ","E", " ","F", " ","G", " ","H", " ","I", " ","J", " ",}, {" ","╔", "═", "╦", "═", "╦", "═", "╦", "═", "╦", "═", "╦", "═", "╦", "═", "╦", "═", "╦", "═", "╦", "═", "╗"}, {"0", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"},{" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"1", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"},{" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"2", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"},{" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"3", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"},{" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"4", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"},{" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"5","║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"},{" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"6", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"},{" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"7", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"},{" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"8", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"}, {" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"9", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"}, {" ", "╚", "═", "╩", "═", "╩", "═", "╩", "═", "╩", "═", "╩", "═", "╩", "═", "╩", "═", "╩", "═", "╩", "═", "╝\n"}};
	
	//convertendo entrada letra para número 
	public int Converte(String aux){
		int linhaC  = 0;
		
		if(aux.equals("a") == true){
			linhaC = 0;
		}else if(aux.equals("b") == true){
			linhaC = 1;
		}else if(aux.equals("c") == true){
			linhaC = 2;
		}else if(aux.equals("d") == true){
			linhaC = 3;
		}else if(aux.equals("e") == true){
			linhaC = 4;
		}else if(aux.equals("f") == true){
			linhaC = 5;
		}else if(aux.equals("g") == true){
			linhaC = 6;
		}else if(aux.equals("h") == true){
			linhaC = 7;
		}else if(aux.equals("i") == true){
			linhaC = 8;
		}else if(aux.equals("j") == true){
			linhaC = 9;
		}
		return linhaC;
	}	

	//coluna ou linha serão estáticos?
	public boolean direcao(int opc){
		boolean test= false;
		
		if(opc == 1 || opc == 2){
			test = true;
		}else if(opc == 3 || opc == 4){
			test = false;
		}
		return test;
	}
	
	//igualando indices das opções que não se movem!
	public int[] cordEstático(int li, int co, boolean test, int tam){
		int x[]= new int[5];
		int y[]= new int[5];
		
		x[0]= li;
		y[0]= co;
		
		if(test == true){
			for(int c=1;c<tam;c++){
				y[c]= co;   
			}
		}
		else if(test == false){
			for(int d=1;d<tam;d++){
				x[d] = li;
			}
		}
		if(test == true){
			return y;
		}else{
			return x;
		}
	}
		
	//pegando proximas linhas ou colunas!
	public int[] cordVariavel(int tam, int opc, int la, int lo, boolean test){
		int x[]= new int[5];
		int y[]= new int[5];
		int resposta = 0;
		
		x[0]= la;
		y[0]= lo;
		
		for(int e=1;e<tam;e++){
			resposta = this.CriarBarcos(opc, tam, la, lo);
			if(test == true){
				x[e]= resposta;
				la = resposta;
			}else{
				y[e]= resposta;
				lo = resposta;
			}
			
		}
		if(test == true){
			return x;
		}else{
			return y;
		}
		
	}
	
	//Criação de Barcos	
	public int CriarBarcos(int opcao, int tamanho, int la, int lo){
			
		switch(opcao){
		case 1:
			--la;
			return la;
		case 2:
			++la;
			return la;
		case 3:
			++lo;
			return lo;
		case 4:
			--lo;
			return lo;
		}
		return lo;
	}
	
	//transformando dois arrays unidimensionais em um bidimensional
	public int[][] tornandoCoordenada(int x[], int y[], boolean test, int tamanho){
		int coordenada[][] = new int [5][2];
		
		for(int f=0;f<tamanho;f++){
			for (int g=0; g<2;g++){
				coordenada[f][g] = x[f]; 
				System.out.println("Barco"+f+g+" ="+":"+coordenada[f][g]);
				g++;
				coordenada[f][g]= y[f];
				System.out.println("Barco"+f+g+" ="+":"+coordenada[f][g]);
			}
		}
		return coordenada;
	}
	
	//Desenha o Tabuleiro
	public void desenharTabuleiro(){
		for (int h = 0; h<22;h++){
			System.out.print("\n");
			for (int k=0; k<46;k++){
				System.out.print(quadrado[h][k]);
			}
		}
	}
	
	//Acertou? ou Errou? ou afundou?
	public boolean acertoOuErro(Barco frota[], int linhA, int colunA){
		int cont=2; 
		boolean uma;
		uma =false;
		
		for(int w=0; w<4;w++){
			int barcoP2[][] = new int[cont][2];
			barcoP2 = frota[w].getCoordenada();
			
			for(int h=0; h<barcoP2.length; h++){
				for(int v=0;v<1; v++){
					if (linhA == barcoP2[h][v] && colunA == barcoP2[h][++v]){
						uma = true;
						
						if(cont == 2){
							contaP--;
							if(contaP==0){
								System.out.println("Barco afundou!");
							}
						}else if(cont ==3){
							contaM--;
							if(contaM==0){
								System.out.println("Barco afundou!");
							}
						}else if(cont ==4){
							contaG--;
							if(contaG==0){	
								System.out.println("Barco afundou!");
							}
						}else if(cont == 5){
							contaE--;							
							if(contaE==0){								
								System.out.println("Barco afundou!");
							}
						}
					}
				}
			}
			
			cont++;
		}
		return uma;
	}
	
	//Redesenha Tabuleiro com acertos ou erros.
	public void RedesenhaTabuleiro(boolean uma, int linhA, int colunA, int qualJogador){
		
		if(qualJogador == 1){
			if(uma == true){
				System.out.println("acertou!");
				int começoL =2, começoC =2;
				começoL = (linhA*2) + começoL;
				começoC = (colunA*2) + começoC;
				quadrado[começoL][começoC] = quadrado[começoL][começoC].replace(" ", "A");
				uma = false;
			}else{
				System.out.println("errou!");
				int começoL =2, começoC =2;
				começoL = (linhA*2) + começoL; //
				começoC = (colunA*2) + começoC;
				quadrado[começoL][começoC] = quadrado[começoL][começoC].replace(" ", "X");
			}
			this.desenharTabuleiro();
		}
		else if(qualJogador == 2){
			if(uma == true){
				System.out.println("acertou!");
				int começoL =2, começoC =26;
				começoL = (linhA*2) + começoL;
				começoC = (colunA*2) + começoC;
				System.out.println("começoC: "+começoC);
				quadrado[começoL][começoC] = quadrado[começoL][começoC].replace(" ", "A");
				uma = false;
			}else{
				System.out.println("errou!");
				int começoL =2, começoC =26;
				começoL = (linhA*2) + começoL; 
				começoC = (colunA*2) + começoC;
				quadrado[começoL][começoC] = quadrado[começoL][começoC].replace(" ", "X");
			}
			this.desenharTabuleiro();
		}
		
		
	}
	

	//Tratando Exceptions
	public void validaCoordenada(int cord) throws CoordenadaInvalidaException{
		if(cord<0 || cord>9){
			throw new CoordenadaInvalidaException("Coordenada com valor não esperado!");
		}
	}
	
	public void validaDirecao(int dir) throws DirecaoInvalidaException{
		if(dir<0 || dir>4){
			throw new DirecaoInvalidaException("Direcionamento com valor não esperado!");
		}
	}
	
	//Arquivos
	
	//Primeiras instruções
	public void Instruções() throws FileNotFoundException, IOException{
		try{
			FileReader ler = new FileReader("Instruções.txt");
			BufferedReader leitor = new BufferedReader(ler);
			String ver = "";
			
			while((ver =leitor.readLine()) != null){
				System.out.println(ver);
			}
			
			String quadrado[][] = {{" ", " ", "A", " ","B", " ","C", " ","D", " ","E", " ","F", " ","G", " ","H", " ","I", " ","J", " ",}, {" ","╔", "═", "╦", "═", "╦", "═", "╦", "═", "╦", "═", "╦", "═", "╦", "═", "╦", "═", "╦", "═", "╦", "═", "╗"}, {"0", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"},{" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"1", "║", " ", "║", " ", "║", "B", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"},{" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"2", "║", " ", "║", " ", "║", "B", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"},{" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"3", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"},{" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"4", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"},{" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"5","║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"},{" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"6", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"},{" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"7", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"},{" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"8", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"}, {" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"9", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"}, {" ", "╚", "═", "╩", "═", "╩", "═", "╩", "═", "╩", "═", "╩", "═", "╩", "═", "╩", "═", "╩", "═", "╩", "═", "╝\n"}};
			for (int h = 0; h<22;h++){
				System.out.print("\n");
				for (int k=0; k<22;k++){
					System.out.print(quadrado[h][k]);
				}
			}
			
		}
		catch(FileNotFoundException ex3){
			ex3.printStackTrace();
		}
		catch(IOException ex4){
			ex4.printStackTrace();
		}
	}
	
	//Mais instruções
	public void Innstruções2() throws FileNotFoundException, IOException{
		try{
			FileReader ler2 = new FileReader("Instruções2.txt");
			BufferedReader leitor2 = new BufferedReader(ler2);
			String ver2 = "";
			
			while((ver2 =leitor2.readLine()) != null){
				System.out.println(ver2);
			}
			
			String quadrado[][] = {{" ", " ", "A", " ","B", " ","C", " ","D", " ","E", " ","F", " ","G", " ","H", " ","I", " ","J", " ",}, {" ","╔", "═", "╦", "═", "╦", "═", "╦", "═", "╦", "═", "╦", "═", "╦", "═", "╦", "═", "╦", "═", "╦", "═", "╗"}, {"0", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"},{" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"1", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"},{" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"2", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"},{" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"3", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"},{" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"4", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"},{" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"5","║", " ", "║", "B", "║", "B", "║", "B", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"},{" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"6", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"},{" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"7", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"},{" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"8", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"}, {" ", "╠", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╬", "═", "╣"}, {"9", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ", "║", " ","║"}, {" ", "╚", "═", "╩", "═", "╩", "═", "╩", "═", "╩", "═", "╩", "═", "╩", "═", "╩", "═", "╩", "═", "╩", "═", "╝\n"}};
			for (int h = 0; h<22;h++){
				System.out.print("\n");
				for (int k=0; k<22;k++){
					System.out.print(quadrado[h][k]);
				}
			}
			
		}
		catch(FileNotFoundException ex5){
			ex5.printStackTrace();
		}
		catch(IOException ex6){
			ex6.printStackTrace();
		}
	}
	
}
